import java.util.*;
public class Main
{
    public static class Node{
        int data;
        Node left;
        Node right;
        
        Node(int data,Node left,Node right){
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
    
    public static class pair{
        Node node;
        int state;
        
        pair(Node node, int state){
            this.node = node;
            this.state = state;
        }
    }
    
    public static int size(Node node){
        if(node == null){
            return 0;
        }
        int lss = size(node.left);
        int rss = size(node.right);
        int tss = lss + rss + 1;
        return tss;
    }
    
    public static int max(Node node){
        if(node == null){
            return Integer.MIN_VALUE;
        }
        int lm = max(node.left);
        int rm = max(node.right);
        int tm = Math.max(node.data,Math.max(lm,rm));
        return tm;
    }
    
    public static int sum(Node node){
        if(node == null){
            return 0;
        }
        int ls = sum(node.left);
        int rs = sum(node.right);
        int ts = ls + rs + node.data;
        return ts;
    }
    
    public static int height(Node node){
        if(node == null){
            return -1;
        }
        int lh = height(node.left);
        int rh = height(node.right);
        int ht = Math.max(lh,rh) + 1;
        return ht ;
    }
    
    public static void display(Node node){
        if(node == null){
            return;
        }
        String str = " ";
        str += node.left == null? '.' : node.left.data + " ";
        str = str + " <- " + node.data + " -> ";
        str += node.left == null? '.' : node.left.data + " ";
        System.out.println(str);
        
        display(node.left);
        display(node.right);
    }
	public static void main(String[] args) {
	    Integer[] arr = {50,25,12,null, null,37,30 ,null, null, null,75,62, null,70, null,null,89,null,null};
	    
	    Node root = new Node(arr[0],null,null);
	    pair rtp = new pair(root,1);
	    
	    Stack<pair> st = new Stack<>();
	    st.push(rtp);
	    int idx =0;
	    while(st.size()>0){
	        pair top = st.peek();
	        if(top.state == 1){
	            idx++;
	            if(arr[idx] != null){
	                top.node.left = new Node(arr[idx],null,null);
	                pair lp = new pair(top.node.left,1);
	                st.push(lp);
	            } else{
	                top.node.left = null;
	            }
	            top.state++;
	        } else if(top.state==2){
	            idx++;
	            if(arr[idx] != null){
	                top.node.right = new Node(arr[idx],null,null);
	                pair rp = new pair(top.node.right,1);
	                st.push(rp);
	            } else{
	                top.node.right = null;
	            }
	            top.state++;
	        } else{
	            st.pop();
	        }
	    }
	    display(root);
	    int s = sum(root);
	    System.out.println(s);
	    int ss = size(root);
	    System.out.println(ss);
	    int h = height(root);
	    System.out.println(h);
	    
	    
	//	System.out.println("Hello World");
	}
}
